apply plugin: 'com.android.application'
apply plugin:'org.greenrobot.greendao'
android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.beijing.ocean.multmediademo"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    greendao{
        schemaVersion 2
        daoPackage'com.beijing.ocean.multmediademo.greendao'
        targetGenDir'src/main/java'
    }

}
sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'src/main/java-gen']
    }
}
dependencies {



    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
//    compile 'com.android.support:cardview-v7:23.4.0'
    compile 'com.android.support:support-v4:23.4.0'

    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.android.support:recyclerview-v7:23.4.0'

    compile 'com.uwetrottmann.photoview:library:1.2.4'
    compile 'com.jcodecraeer:xrecyclerview:1.3.2'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile files('libs/MobCommons-2017.0216.1054.jar')
    compile 'com.daimajia.slider:library:1.1.5'
    compile files('libs/jsoup-1.6.1.jar')
    compile 'com.github.ybq:Android-SpinKit:1.1.0'
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:v1.5.3'
    compile 'com.heaven7.core.util:memory:1.0.5'

    compile'org.greenrobot:greendao:3.1.0'
    compile'org.greenrobot:greendao-generator:3.1.0'

    compile 'com.github.yuweiguocn:GreenDaoUpgradeHelper:v1.3.0'

}

public class BuildTimeListener implements TaskExecutionListener, BuildListener {
    private Clock clock
    private times = []

    @Override
    void beforeExecute(Task task) {
        clock = new org.gradle.util.Clock()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock.timeInMs
        times.add([ms, task.path])

        //task.project.logger.warn "${task.path} spend ${ms}ms"
    }

    @Override
    void buildStarted(Gradle gradle) {

    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task spend time:"
        for (time in times) {
            if (time[0] >= 50) {
                printf "%7sms  %s\n", time
            }
        }
    }


}

project.gradle.addListener(new BuildTimeListener())
